# -*- coding: utf-8 -*-
"""face-mask-detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qs1PXTtOZKBPa1FItNAon4EBOGLYAADY
"""

!pip install imutils

from google.colab import drive
drive.mount("/content/drive")

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
import os

"""## Preprocessing of data"""

directory = '/content/drive/MyDrive/dataset'
category = ["with_mask", "without_mask"]

"""now we will create two arrays, data to store the array of each image and label which stores the label or annotation of each of these images"""

data=[]
labels=[]

for cat in category:
    i=0
    path=os.path.join(directory,cat)
    for img in os.listdir(path):
        while(i<=1497):
            img_path=os.path.join(path,img)
            image=load_img(img_path,target_size=(224,224))
            image=img_to_array(image)
            image=preprocess_input(image)
            data.append(image)
            labels.append(cat)
            i=i+1

"""now we have it in the form of labels so we will try encoding i

"""

le=LabelBinarizer()
labels=le.fit_transform(labels)
labels=to_categorical(labels)

data=np.array(data,dtype="float32")
labels=np.array(labels)

X_train, X_test, y_train, y_test=train_test_split(data,labels,test_size=0.7,stratify=labels,random_state=42)

aug = ImageDataGenerator(
	rotation_range=20,
	zoom_range=0.15,
	width_shift_range=0.2,
	height_shift_range=0.2,
	shear_range=0.15,
	horizontal_flip=True,
	fill_mode="nearest")

"""Now that the preprocessing is done, we will move to the training part

we are going to use CNN for our first model, here instead of using the convolution layer, we are using mobile net.
"""

init_lr=0.0001
epochs=20
bs=32

mnmodel=MobileNetV2(weights="imagenet",include_top=False,input_tensor=Input(shape=(224,224,3)))

hmodel=mnmodel.output
hmodel=AveragePooling2D(pool_size=(7,7))(hmodel)
hmodel=Flatten(name="flatten")(hmodel)
hmodel=Dense(128,activation="relu")(hmodel)
hmodel=Dropout(0.5)(hmodel)
hmodel=Dense(2,activation="softmax")(hmodel)

model=Model(inputs=mnmodel.input,outputs=hmodel)

for layer in mnmodel.layers:
    layer.trainable=False

print("compiling model==>")
opt=Adam(learning_rate=init_lr,decay=init_lr/epochs)
model.compile(loss="binary_crossentropy",optimizer=opt,metrics=["accuracy"])

print("training model==>")
H=model.fit(
    aug.flow(X_train,y_train,batch_size=bs),
    steps_per_epoch=len(X_train)//bs,
    validation_data=(X_test,y_test),
    epochs=epochs
)

print("evaluating network==>")
predidxs=model.predict(X_test,batch_size=bs)

predidxs=np.argmax(predidxs,axis=1)

print(classification_report(y_test.argmax(axis=1),predidxs,target_names=le.classes_))

model.save("mask_detector.model",save_format="h5")

N = epochs
plt.style.use("ggplot")
plt.figure()
plt.plot(np.arange(0, N), H.history["loss"], label="train_loss")
plt.plot(np.arange(0, N), H.history["val_loss"], label="val_loss")
plt.plot(np.arange(0, N), H.history["accuracy"], label="train_acc")
plt.plot(np.arange(0, N), H.history["val_accuracy"], label="val_acc")
plt.title("Training Loss and Accuracy")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend(loc="lower left")
plt.savefig("plot.png")

"""Now we will perform the real time detection"""

from imutils.video import VideoStream
import cv2

def face(frame,facenet,model):
    (h, w) = frame.shape[:2]
    blob = cv2.dnn.blobFromImage(frame,1.0,(224,224),(104.0,177.0,123.0))
    facenet.setInput(blob)
    detections = facenet.forward()
    print(detections.shape)
    faces=[]
    locs = []
    preds = []
    for i in range(0, detections.shape[2]):
	    confidence = detections[0, 0, i, 2]
	    if confidence > 0.5:
	    	box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
	    	(startX, startY, endX, endY) = box.astype("int")
	    	(startX, startY) = (max(0, startX), max(0, startY))
	    	(endX, endY) = (min(w - 1, endX), min(h - 1, endY))
	    	face = frame[startY:endY, startX:endX]
	    	face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)
	    	face = cv2.resize(face, (224, 224))
	    	face = img_to_array(face)
	    	face = preprocess_input(face)
	    	faces.append(face)
	    	locs.append((startX, startY, endX, endY))
    if len(faces) > 0:
	    faces = np.array(faces, dtype="float32")
	    preds = model.predict(faces, batch_size=32)
    return (locs, preds)

prototxtPath = "/content/deploy.prototxt"
weightsPath = "/content/res10_300x300_ssd_iter_140000.caffemodel"
cv2.getBuildInformation()
facenet = cv2.dnn.readNet(prototxtPath, weightsPath)

vs=cv2.VideoCapture('/content/mask.mp4')
vs1=cv2.VideoCapture('/content/WIN_20220428_14_57_53_Pro.mp4')
#vs=cv2.VideoCapture(0)

from google.colab.patches import cv2_imshow

def mask(vs):
	while True:
		success,frame = vs.read()
		if success:
			assert not isinstance(frame,type(None)), 'frame not found'
			#frame = imutils.resize(frame, width=400)

		(locs, preds) = face(frame, facenet, model)

		for (box, pred) in zip(locs, preds):
			(startX, startY, endX, endY) = box
			(mask, withoutMask) = pred

			label = "Mask" if mask > withoutMask else "No Mask"
			color = (0, 255, 0) if label == "Mask" else (0, 0, 255)


			label = "{}: {:.2f}%".format(label, max(mask, withoutMask) * 100)


			cv2.putText(frame, label, (startX, startY - 10),
				cv2.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)
			cv2.rectangle(frame, (startX, startY), (endX, endY), color, 2)


		cv2_imshow(frame)
		key = cv2.waitKey(1) & 0xFF


		if key == ord("b"):
			break

mask(vs)
vs.close()

mask(vs1)
cv2.DestroyAllWindows()
vs1.close()

a=cv2.VideoCapture('/content/faces/aditi.jpeg')
b=cv2.VideoCapture('/content/faces/bhagwat.jpeg')
c=cv2.VideoCapture('/content/faces/rachel.jpeg')
d=cv2.VideoCapture('/content/faces/sagnik.jpeg')
e=cv2.VideoCapture('/content/faces/teju mask.mp4')
f=cv2.VideoCapture('/content/faces/teju no mask.mp4')
g=cv2.VideoCapture('/content/faces/me and arnau.jpeg')

mask(a)
cv2.DestroyAllWindows()
a.close()

mask(b)
cv2.DestroyAllWindows()
b.close()

mask(c)
cv2.DestroyAllWindows()
c.close()

mask(d)
cv2.DestroyAllWindows()
d.close()

mask(e)
cv2.DestroyAllWindows()
e.close()

mask(f)
cv2.DestroyAllWindows()
f.close()

mask(g)
cv2.DestroyAllWindows()
g.close()